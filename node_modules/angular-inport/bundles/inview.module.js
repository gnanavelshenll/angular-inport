System.registerDynamic("inview.directive", ["@angular/core", "rxjs/Rx", "./utils/scroll-observable", "./utils/offset-resolver", "./utils/position-resolver", "./utils/viewport-ruler"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("@angular/core");
    var Rx_1 = $__require("rxjs/Rx");
    var scroll_observable_1 = $__require("./utils/scroll-observable");
    var offset_resolver_1 = $__require("./utils/offset-resolver");
    var position_resolver_1 = $__require("./utils/position-resolver");
    var viewport_ruler_1 = $__require("./utils/viewport-ruler");
    ;
    var InviewDirective = function () {
        function InviewDirective(_scrollObservable, _element, _zone, _windowRuler) {
            this._scrollObservable = _scrollObservable;
            this._element = _element;
            this._zone = _zone;
            this._windowRuler = _windowRuler;
            this._throttleType = 'debounce';
            this._offset = [0, 0, 0, 0];
            this._viewPortOffset = [0, 0, 0, 0];
            this._throttle = 0;
            this._lazy = false;
            this._tooLazy = false;
            this.inview = new core_1.EventEmitter();
        }
        Object.defineProperty(InviewDirective.prototype, "offset", {
            set: function (offset) {
                this._offset = offset_resolver_1.OffsetResolverFactory.create(offset).normalizeOffset();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviewDirective.prototype, "viewPortOffset", {
            set: function (offset) {
                this._viewPortOffset = offset_resolver_1.OffsetResolverFactory.create(offset).normalizeOffset();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviewDirective.prototype, "throttle", {
            set: function (throttle) {
                this._throttle = throttle;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviewDirective.prototype, "scrollELement", {
            set: function (sw) {
                this._scrollElement = sw;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviewDirective.prototype, "lazy", {
            set: function (lzy) {
                this._lazy = lzy;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviewDirective.prototype, "tooLazy", {
            set: function (lzy) {
                this._tooLazy = lzy;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviewDirective.prototype, "data", {
            set: function (_d) {
                this._data = _d;
            },
            enumerable: true,
            configurable: true
        });
        InviewDirective.prototype.ngAfterViewInit = function () {
            var _this = this;
            this._scrollerSubscription = this._scrollObservable.scrollObservableFor(this._scrollElement || window)[this._throttleType](function () {
                return Rx_1.Observable.timer(_this._throttle);
            }).filter(function () {
                return true;
            }).mergeMap(function (event) {
                return Rx_1.Observable.of(_this._getViewPortRuler());
            }).subscribe(function (containersBounds) {
                return _this.handleOnScroll(containersBounds);
            });
        };
        InviewDirective.prototype._getViewPortRuler = function () {
            return this._scrollElement ? position_resolver_1.PositionResolver.getBoundingClientRect(this._scrollElement) : this._windowRuler.getWindowViewPortRuler();
        };
        InviewDirective.prototype.ngOnInit = function () {};
        InviewDirective.prototype.ngOnDestroy = function () {
            if (this._scrollerSubscription) {
                this._scrollerSubscription.unsubscribe();
            }
        };
        InviewDirective.prototype.handleOnScroll = function (containersBounds) {
            var _this = this;
            var viewPortOffsetRect = position_resolver_1.PositionResolver.offsetRect(containersBounds, this._viewPortOffset);
            var elementOffsetRect = position_resolver_1.PositionResolver.offsetRect(position_resolver_1.PositionResolver.getBoundingClientRect(this._element.nativeElement), this._offset);
            var isVisible = position_resolver_1.PositionResolver.isVisible(this._element.nativeElement) && position_resolver_1.PositionResolver.intersectRect(elementOffsetRect, viewPortOffsetRect);
            if (this._tooLazy && this._previous_state !== undefined && this._previous_state === isVisible) {
                return;
            }
            var output = { status: isVisible };
            if (this._data !== undefined) {
                output.data = this._data;
            }
            if (!this._lazy && !isVisible) {
                output.isClipped = false;
                output.isOutsideView = true;
                output.parts = { top: false, right: false, left: false, bottom: false };
                this._zone.run(function () {
                    return _this.inview.emit(output);
                });
            }
            if (!isVisible) {
                this._previous_state = isVisible;
                return;
            }
            var _a = position_resolver_1.PositionResolver.clippedStatus(elementOffsetRect, viewPortOffsetRect),
                isClipped = _a.isClipped,
                isOutsideView = _a.isOutsideView;
            output.isClipped = isClipped;
            output.isOutsideView = isOutsideView;
            output.parts = position_resolver_1.PositionResolver.inViewParts(viewPortOffsetRect, elementOffsetRect);
            this._zone.run(function () {
                return _this.inview.emit(output);
            });
            this._previous_state = isVisible;
        };
        return InviewDirective;
    }();
    __decorate([core_1.Input(), __metadata("design:type", Object), __metadata("design:paramtypes", [Object])], InviewDirective.prototype, "offset", null);
    __decorate([core_1.Input(), __metadata("design:type", Object), __metadata("design:paramtypes", [Object])], InviewDirective.prototype, "viewPortOffset", null);
    __decorate([core_1.Input(), __metadata("design:type", Number), __metadata("design:paramtypes", [Number])], InviewDirective.prototype, "throttle", null);
    __decorate([core_1.Input(), __metadata("design:type", HTMLElement), __metadata("design:paramtypes", [HTMLElement])], InviewDirective.prototype, "scrollELement", null);
    __decorate([core_1.Input(), __metadata("design:type", Boolean), __metadata("design:paramtypes", [Boolean])], InviewDirective.prototype, "lazy", null);
    __decorate([core_1.Input(), __metadata("design:type", Boolean), __metadata("design:paramtypes", [Boolean])], InviewDirective.prototype, "tooLazy", null);
    __decorate([core_1.Input(), __metadata("design:type", Object), __metadata("design:paramtypes", [Object])], InviewDirective.prototype, "data", null);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], InviewDirective.prototype, "inview", void 0);
    InviewDirective = __decorate([core_1.Directive({
        selector: '[in-view]'
    }), __metadata("design:paramtypes", [scroll_observable_1.ScrollObservable, core_1.ElementRef, core_1.NgZone, viewport_ruler_1.WindowRuler])], InviewDirective);
    exports.InviewDirective = InviewDirective;
});
System.registerDynamic("utils/offset-resolver", [], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    Object.defineProperty(exports, "__esModule", { value: true });
    var OffsetResolverFactory = function () {
        function OffsetResolverFactory() {}
        OffsetResolverFactory.create = function (offset) {
            return new OffsetResolver(offset);
        };
        return OffsetResolverFactory;
    }();
    exports.OffsetResolverFactory = OffsetResolverFactory;
    var OffsetResolver = function () {
        function OffsetResolver(offset) {
            this.offset = offset;
        }
        OffsetResolver.prototype.normalizeOffset = function () {
            if (!Array.isArray(this.offset)) {
                return [this.offset, this.offset, this.offset, this.offset];
            }
            if (this.offset.length === 2) {
                return this.offset.concat(this.offset);
            } else if (this.offset.length === 3) {
                return this.offset.concat([this.offset[1]]);
            }
            return this.offset;
        };
        return OffsetResolver;
    }();
    exports.OffsetResolver = OffsetResolver;
});
System.registerDynamic("inview-container.directive", ["@angular/core", "rxjs/Rx", "./inview-item.directive", "./utils/scroll-observable", "./utils/viewport-ruler", "./utils/offset-resolver", "./utils/position-resolver"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("@angular/core");
    var Rx_1 = $__require("rxjs/Rx");
    var inview_item_directive_1 = $__require("./inview-item.directive");
    var scroll_observable_1 = $__require("./utils/scroll-observable");
    var viewport_ruler_1 = $__require("./utils/viewport-ruler");
    var offset_resolver_1 = $__require("./utils/offset-resolver");
    var position_resolver_1 = $__require("./utils/position-resolver");
    var InviewContainerDirective = function () {
        function InviewContainerDirective(_element, _scrollObservable, _windowRuler, _zone) {
            this._element = _element;
            this._scrollObservable = _scrollObservable;
            this._windowRuler = _windowRuler;
            this._zone = _zone;
            this._throttleType = 'debounce';
            this._offset = [0, 0, 0, 0];
            this._viewPortOffset = [0, 0, 0, 0];
            this._throttle = 0;
            this._scrollWindow = true;
            this._lastScrollY = 0;
            this._scrollDirection = 'down';
            this.inview = new core_1.EventEmitter();
        }
        Object.defineProperty(InviewContainerDirective.prototype, "offset", {
            set: function (offset) {
                this._offset = offset_resolver_1.OffsetResolverFactory.create(offset).normalizeOffset();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviewContainerDirective.prototype, "viewPortOffset", {
            set: function (offset) {
                this._viewPortOffset = offset_resolver_1.OffsetResolverFactory.create(offset).normalizeOffset();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviewContainerDirective.prototype, "throttle", {
            set: function (throttle) {
                this._throttle = throttle;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviewContainerDirective.prototype, "scrollWindow", {
            set: function (sw) {
                this._scrollWindow = !!sw;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviewContainerDirective.prototype, "data", {
            set: function (_d) {
                this._data = _d;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviewContainerDirective.prototype, "bestMatch", {
            set: function (bm) {
                this._bestMatch = !!bm;
            },
            enumerable: true,
            configurable: true
        });
        InviewContainerDirective.prototype.ngOnInit = function () {};
        InviewContainerDirective.prototype.ngAfterViewInit = function () {
            var _this = this;
            this._scrollSuscription = this._scrollObservable.scrollObservableFor(this._scrollWindow ? window : this._element.nativeElement)[this._throttleType](function () {
                return Rx_1.Observable.timer(_this._throttle);
            }).filter(function () {
                return true;
            }).mergeMap(function (event) {
                return Rx_1.Observable.of(_this._getViewPortRuler());
            }).do(function () {
                return _this._checkScrollDirection();
            }).subscribe(function (containersBounds) {
                return _this.handleOnScroll(containersBounds);
            });
        };
        InviewContainerDirective.prototype._checkScrollDirection = function () {
            if (this._scrollWindow) {
                this._scrollDirection = window.scrollY > this._lastScrollY ? 'down' : 'up';
                this._lastScrollY = window.scrollY;
            } else {
                this._scrollDirection = this._element.nativeElement.scrollTop > this._lastScrollY ? 'down' : 'up';
                this._lastScrollY = this._element.nativeElement.scrollTop;
            }
        };
        InviewContainerDirective.prototype._getViewPortRuler = function () {
            return this._scrollWindow ? this._windowRuler.getWindowViewPortRuler() : position_resolver_1.PositionResolver.getBoundingClientRect(this._element.nativeElement);
        };
        InviewContainerDirective.prototype.ngOnDestroy = function () {
            if (this._scrollSuscription) {
                this._scrollSuscription.unsubscribe();
            }
        };
        InviewContainerDirective.prototype.handleOnScroll = function (containersBounds) {
            var _this = this;
            var viewPortOffsetRect = position_resolver_1.PositionResolver.offsetRect(containersBounds, this._viewPortOffset);
            var visibleChildren = [];
            if (this._inviewChildren) {
                visibleChildren = this._inviewChildren.toArray().filter(function (child) {
                    var elementOffsetRect = position_resolver_1.PositionResolver.offsetRect(child.getELementRect(), _this._offset);
                    return child.isVisible() && position_resolver_1.PositionResolver.intersectRect(elementOffsetRect, viewPortOffsetRect);
                });
                if (this._bestMatch) {
                    var bestMatchChild_1;
                    if (visibleChildren.length) {
                        visibleChildren.reduce(function (distance, currChild) {
                            var _distance = position_resolver_1.PositionResolver.distance(viewPortOffsetRect, position_resolver_1.PositionResolver.offsetRect(currChild.getELementRect(), _this._offset));
                            if (distance > _distance) {
                                bestMatchChild_1 = currChild;
                                return _distance;
                            }
                            return distance;
                        }, Infinity);
                    }
                    var data_1 = bestMatchChild_1 ? bestMatchChild_1.getData() : {};
                    data_1.direction = this._scrollDirection;
                    this._zone.run(function () {
                        return _this.inview.emit(data_1);
                    });
                } else {
                    var data_2 = {};
                    data_2.inview = visibleChildren.map(function (vc) {
                        return vc.getData();
                    });
                    data_2.direction = this._scrollDirection;
                    this._zone.run(function () {
                        return _this.inview.emit(data_2);
                    });
                }
            }
        };
        return InviewContainerDirective;
    }();
    __decorate([core_1.Input(), __metadata("design:type", Object), __metadata("design:paramtypes", [Object])], InviewContainerDirective.prototype, "offset", null);
    __decorate([core_1.Input(), __metadata("design:type", Object), __metadata("design:paramtypes", [Object])], InviewContainerDirective.prototype, "viewPortOffset", null);
    __decorate([core_1.Input(), __metadata("design:type", Number), __metadata("design:paramtypes", [Number])], InviewContainerDirective.prototype, "throttle", null);
    __decorate([core_1.Input(), __metadata("design:type", Boolean), __metadata("design:paramtypes", [Boolean])], InviewContainerDirective.prototype, "scrollWindow", null);
    __decorate([core_1.Input(), __metadata("design:type", Object), __metadata("design:paramtypes", [Object])], InviewContainerDirective.prototype, "data", null);
    __decorate([core_1.Input(), __metadata("design:type", Object), __metadata("design:paramtypes", [Object])], InviewContainerDirective.prototype, "bestMatch", null);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], InviewContainerDirective.prototype, "inview", void 0);
    __decorate([core_1.ContentChildren(inview_item_directive_1.InviewItemDirective), __metadata("design:type", core_1.QueryList)], InviewContainerDirective.prototype, "_inviewChildren", void 0);
    InviewContainerDirective = __decorate([core_1.Directive({
        selector: '[in-view-container]'
    }), __metadata("design:paramtypes", [core_1.ElementRef, scroll_observable_1.ScrollObservable, viewport_ruler_1.WindowRuler, core_1.NgZone])], InviewContainerDirective);
    exports.InviewContainerDirective = InviewContainerDirective;
});
System.registerDynamic("utils/position-resolver", [], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    Object.defineProperty(exports, "__esModule", { value: true });
    function isPercent(value) {
        return typeof value === 'string' && value.indexOf('%') > -1;
    }
    function distance(p1, p2) {
        return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
    }
    var PositionResolver = function () {
        function PositionResolver() {}
        PositionResolver.getBoundingClientRect = function (element) {
            return element.getBoundingClientRect();
        };
        PositionResolver.isVisible = function (element) {
            return !!(element.offsetWidth || element.offsetHeight || element.getClientRects().length);
        };
        PositionResolver.intersectRect = function (r1, r2) {
            return !(r2.left > r1.right || r2.right < r1.left || r2.top > r1.bottom || r2.bottom < r1.top);
        };
        PositionResolver.offsetRect = function (rect, offset) {
            if (!offset) {
                return rect;
            }
            var offsetObject = {
                top: isPercent(offset[0]) ? parseFloat(offset[0]) * rect.height : offset[0],
                right: isPercent(offset[1]) ? parseFloat(offset[1]) * rect.width : offset[1],
                bottom: isPercent(offset[2]) ? parseFloat(offset[2]) * rect.height : offset[2],
                left: isPercent(offset[3]) ? parseFloat(offset[3]) * rect.width : offset[3]
            };
            return {
                top: rect.top - offsetObject.top,
                left: rect.left - offsetObject.left,
                bottom: rect.bottom + offsetObject.bottom,
                right: rect.right + offsetObject.right,
                height: rect.height + offsetObject.top + offsetObject.bottom,
                width: rect.width + offsetObject.left + offsetObject.right
            };
        };
        PositionResolver.distance = function (containerRect, elementRect) {
            var middlePointOfContainer = {
                x: containerRect.height / 2,
                y: containerRect.width / 2
            };
            var middlePointOfElement = {
                x: elementRect.top + elementRect.height / 2,
                y: elementRect.left + elementRect.width / 2
            };
            return distance(middlePointOfContainer, middlePointOfElement);
        };
        PositionResolver.inviewPercentage = function (containerRect, elementRect) {
            return {
                top: 100 * elementRect.top / containerRect.top,
                left: 100 * elementRect.left / containerRect.left,
                bottom: 100 * elementRect.bottom / containerRect.bottom,
                right: 100 * elementRect.right / containerRect.right
            };
        };
        PositionResolver.inViewParts = function (containerRect, elementRect) {
            return {
                top: elementRect.top >= containerRect.top,
                left: elementRect.left >= containerRect.left,
                bottom: elementRect.bottom <= containerRect.bottom,
                right: elementRect.right <= containerRect.right
            };
        };
        PositionResolver.isElementOutsideView = function (elementBounds, containersBounds) {
            var outsideAbove = elementBounds.bottom < containersBounds.top;
            var outsideBelow = elementBounds.top > containersBounds.bottom;
            var outsideLeft = elementBounds.right < containersBounds.left;
            var outsideRight = elementBounds.left > containersBounds.right;
            return outsideAbove || outsideBelow || outsideLeft || outsideRight;
        };
        PositionResolver.isElementClipped = function (elementBounds, containersBounds) {
            var clippedAbove = elementBounds.top < containersBounds.top;
            var clippedBelow = elementBounds.bottom > containersBounds.bottom;
            var clippedLeft = elementBounds.left < containersBounds.left;
            var clippedRight = elementBounds.right > containersBounds.right;
            return clippedAbove || clippedBelow || clippedLeft || clippedRight;
        };
        PositionResolver.clippedStatus = function (elementBounds, containersBounds) {
            return {
                isClipped: this.isElementClipped(elementBounds, containersBounds),
                isOutsideView: this.isElementOutsideView(elementBounds, containersBounds)
            };
        };
        return PositionResolver;
    }();
    exports.PositionResolver = PositionResolver;
});
System.registerDynamic("inview-item.directive", ["@angular/core", "./utils/position-resolver"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("@angular/core");
    var position_resolver_1 = $__require("./utils/position-resolver");
    var InviewItemDirective = function () {
        function InviewItemDirective(_element) {
            this._element = _element;
        }
        Object.defineProperty(InviewItemDirective.prototype, "data", {
            set: function (d) {
                this._data = d;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviewItemDirective.prototype, "id", {
            set: function (_id) {
                this._id = _id;
            },
            enumerable: true,
            configurable: true
        });
        InviewItemDirective.prototype.ngOnInit = function () {};
        InviewItemDirective.prototype.getELementRect = function () {
            return position_resolver_1.PositionResolver.getBoundingClientRect(this._element.nativeElement);
        };
        InviewItemDirective.prototype.isVisible = function () {
            return position_resolver_1.PositionResolver.isVisible(this._element.nativeElement);
        };
        InviewItemDirective.prototype.getData = function () {
            return { id: this._id, data: this._data };
        };
        return InviewItemDirective;
    }();
    __decorate([core_1.Input(), __metadata("design:type", Object), __metadata("design:paramtypes", [Object])], InviewItemDirective.prototype, "data", null);
    __decorate([core_1.Input(), __metadata("design:type", Object), __metadata("design:paramtypes", [Object])], InviewItemDirective.prototype, "id", null);
    InviewItemDirective = __decorate([core_1.Directive({
        selector: '[in-view-item]'
    }), __metadata("design:paramtypes", [core_1.ElementRef])], InviewItemDirective);
    exports.InviewItemDirective = InviewItemDirective;
});
System.registerDynamic("utils/scroll-observable", ["@angular/core", "rxjs/Observable", "rxjs/add/observable/fromEvent", "rxjs/add/observable/merge", "rxjs/add/operator/share", "./viewport-ruler"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("@angular/core");
    var Observable_1 = $__require("rxjs/Observable");
    $__require("rxjs/add/observable/fromEvent");
    $__require("rxjs/add/observable/merge");
    $__require("rxjs/add/operator/share");
    var viewport_ruler_1 = $__require("./viewport-ruler");
    var ScrollObservable = ScrollObservable_1 = function () {
        function ScrollObservable(_windowRuler) {
            this._windowRuler = _windowRuler;
            if (!ScrollObservable_1._globalObservable) {
                ScrollObservable_1._globalObservable = this._getGlobalObservable();
            }
        }
        ScrollObservable.isWindow = function (windowElement) {
            return Object.prototype.toString.call(windowElement).includes('Window');
        };
        ScrollObservable.prototype._getGlobalObservable = function () {
            var _this = this;
            return Observable_1.Observable.merge(Observable_1.Observable.fromEvent(window.document, 'scroll'), Observable_1.Observable.fromEvent(window, 'resize').map(function (event) {
                _this._windowRuler.onChange();
                return event;
            })).share();
        };
        ScrollObservable.prototype.scrollObservableFor = function (windowElement) {
            if (ScrollObservable_1.isWindow(windowElement)) {
                return ScrollObservable_1._globalObservable;
            }
            if (ScrollObservable_1._elementObservableReferences.has(windowElement)) {
                return ScrollObservable_1._elementObservableReferences.get(windowElement);
            }
            var ref = this._createElementObservable(windowElement);
            ScrollObservable_1._elementObservableReferences.set(windowElement, ref);
            return ref;
        };
        ScrollObservable.prototype._createElementObservable = function (windowElement) {
            return Observable_1.Observable.fromEvent(windowElement, 'scroll').share();
        };
        return ScrollObservable;
    }();
    ScrollObservable._globalObservable = null;
    ScrollObservable._elementObservableReferences = new Map();
    ScrollObservable = ScrollObservable_1 = __decorate([core_1.Injectable(), __metadata("design:paramtypes", [viewport_ruler_1.WindowRuler])], ScrollObservable);
    exports.ScrollObservable = ScrollObservable;
    var ScrollObservable_1;
});
System.registerDynamic("utils/viewport-ruler", ["@angular/core"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("@angular/core");
    var WindowRulerStatic = function () {
        function WindowRulerStatic() {}
        WindowRulerStatic._createWindowRect = function () {
            var height = window.innerHeight;
            var width = window.innerWidth;
            return {
                top: 0,
                left: 0,
                bottom: height,
                right: width,
                height: height,
                width: width
            };
        };
        WindowRulerStatic.onChange = function () {
            this._windowRect = this._createWindowRect();
        };
        WindowRulerStatic.getWindowViewPortRuler = function () {
            return this._windowRect;
        };
        return WindowRulerStatic;
    }();
    exports.WindowRulerStatic = WindowRulerStatic;
    var WindowRuler = function () {
        function WindowRuler() {
            WindowRulerStatic.onChange();
        }
        WindowRuler.prototype.onChange = function () {
            WindowRulerStatic.onChange();
        };
        WindowRuler.prototype.getWindowViewPortRuler = function () {
            return WindowRulerStatic.getWindowViewPortRuler();
        };
        return WindowRuler;
    }();
    WindowRuler = __decorate([core_1.Injectable(), __metadata("design:paramtypes", [])], WindowRuler);
    exports.WindowRuler = WindowRuler;
});
System.registerDynamic("inview.module", ["@angular/core", "./inview.directive", "./inview-container.directive", "./inview-item.directive", "./utils/scroll-observable", "./utils/viewport-ruler"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("@angular/core");
    var inview_directive_1 = $__require("./inview.directive");
    var inview_container_directive_1 = $__require("./inview-container.directive");
    var inview_item_directive_1 = $__require("./inview-item.directive");
    var scroll_observable_1 = $__require("./utils/scroll-observable");
    var viewport_ruler_1 = $__require("./utils/viewport-ruler");
    var NgInviewModule = function () {
        function NgInviewModule() {}
        return NgInviewModule;
    }();
    NgInviewModule = __decorate([core_1.NgModule({
        imports: [],
        declarations: [inview_directive_1.InviewDirective, inview_container_directive_1.InviewContainerDirective, inview_item_directive_1.InviewItemDirective],
        exports: [inview_directive_1.InviewDirective, inview_container_directive_1.InviewContainerDirective, inview_item_directive_1.InviewItemDirective],
        providers: [scroll_observable_1.ScrollObservable, viewport_ruler_1.WindowRuler]
    })], NgInviewModule);
    exports.NgInviewModule = NgInviewModule;
});