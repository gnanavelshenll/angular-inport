"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Observable_1 = require("rxjs/Observable");
require("rxjs/add/observable/fromEvent");
require("rxjs/add/observable/merge");
require("rxjs/add/operator/share");
var viewport_ruler_1 = require("./viewport-ruler");
var ScrollObservable = ScrollObservable_1 = (function () {
    function ScrollObservable(_windowRuler) {
        this._windowRuler = _windowRuler;
        if (!ScrollObservable_1._globalObservable) {
            ScrollObservable_1._globalObservable = this._getGlobalObservable();
        }
    }
    ScrollObservable.isWindow = function (windowElement) {
        return Object.prototype.toString.call(windowElement).includes('Window');
    };
    ScrollObservable.prototype._getGlobalObservable = function () {
        var _this = this;
        return Observable_1.Observable.merge(Observable_1.Observable.fromEvent(window.document, 'scroll'), Observable_1.Observable.fromEvent(window, 'resize')
            .map(function (event) {
            _this._windowRuler.onChange();
            return event;
        })).share();
    };
    ScrollObservable.prototype.scrollObservableFor = function (windowElement) {
        if (ScrollObservable_1.isWindow(windowElement)) {
            return ScrollObservable_1._globalObservable;
        }
        if (ScrollObservable_1._elementObservableReferences.has(windowElement)) {
            return ScrollObservable_1._elementObservableReferences.get(windowElement);
        }
        var ref = this._createElementObservable(windowElement);
        ScrollObservable_1._elementObservableReferences.set(windowElement, ref);
        return ref;
    };
    ScrollObservable.prototype._createElementObservable = function (windowElement) {
        return Observable_1.Observable.fromEvent(windowElement, 'scroll').share();
    };
    return ScrollObservable;
}());
ScrollObservable._globalObservable = null;
ScrollObservable._elementObservableReferences = new Map();
ScrollObservable = ScrollObservable_1 = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [viewport_ruler_1.WindowRuler])
], ScrollObservable);
exports.ScrollObservable = ScrollObservable;
var ScrollObservable_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLW9ic2VydmFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvc2Nyb2xsLW9ic2VydmFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxzQ0FBMkM7QUFDM0MsOENBQTZDO0FBQzdDLHlDQUF1QztBQUN2QyxxQ0FBbUM7QUFDbkMsbUNBQWlDO0FBQ2pDLG1EQUErQztBQUkvQyxJQUFhLGdCQUFnQjtJQU0zQiwwQkFBb0IsWUFBeUI7UUFBekIsaUJBQVksR0FBWixZQUFZLENBQWE7UUFDM0MsRUFBRSxDQUFDLENBQUMsQ0FBQyxrQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7WUFDeEMsa0JBQWdCLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFDbkUsQ0FBQztJQUNILENBQUM7SUFQTSx5QkFBUSxHQUFmLFVBQWdCLGFBQTRCO1FBQzFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFNTywrQ0FBb0IsR0FBNUI7UUFBQSxpQkFTQztRQVJDLE1BQU0sQ0FBQyx1QkFBVSxDQUFDLEtBQUssQ0FDckIsdUJBQVUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsRUFDL0MsdUJBQVUsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQzthQUNyQyxHQUFHLENBQUMsVUFBQyxLQUFVO1lBQ2QsS0FBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUM3QixNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ2pCLENBQUMsQ0FBQyxDQUNELENBQUMsS0FBSyxFQUFFLENBQUM7SUFDWixDQUFDO0lBQ0QsOENBQW1CLEdBQW5CLFVBQW9CLGFBQTRCO1FBQzlDLEVBQUUsQ0FBQyxDQUFDLGtCQUFnQixDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDN0MsTUFBTSxDQUFDLGtCQUFnQixDQUFDLGlCQUFpQixDQUFDO1FBQzVDLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxrQkFBZ0IsQ0FBQyw0QkFBNEIsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JFLE1BQU0sQ0FBQyxrQkFBZ0IsQ0FBQyw0QkFBNEIsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDMUUsQ0FBQztRQUNELElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUN6RCxrQkFBZ0IsQ0FBQyw0QkFBNEIsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3RFLE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFDYixDQUFDO0lBQ08sbURBQXdCLEdBQWhDLFVBQWlDLGFBQTRCO1FBQzNELE1BQU0sQ0FBQyx1QkFBVSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDL0QsQ0FBQztJQUVILHVCQUFDO0FBQUQsQ0FBQyxBQXBDRCxJQW9DQztBQW5DUSxrQ0FBaUIsR0FBb0IsSUFBSSxDQUFDO0FBQzFDLDZDQUE0QixHQUF3QyxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBRjFFLGdCQUFnQjtJQUQ1QixpQkFBVSxFQUFFO3FDQU91Qiw0QkFBVztHQU5sQyxnQkFBZ0IsQ0FvQzVCO0FBcENZLDRDQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xuaW1wb3J0ICdyeGpzL2FkZC9vYnNlcnZhYmxlL2Zyb21FdmVudCc7XG5pbXBvcnQgJ3J4anMvYWRkL29ic2VydmFibGUvbWVyZ2UnO1xuaW1wb3J0ICdyeGpzL2FkZC9vcGVyYXRvci9zaGFyZSc7XG5pbXBvcnQgeyBXaW5kb3dSdWxlciB9IGZyb20gJy4vdmlld3BvcnQtcnVsZXInO1xuaW1wb3J0IHsgV2luZG93RWxlbWVudCB9IGZyb20gJy4vbW9kZWxzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNjcm9sbE9ic2VydmFibGUge1xuICBzdGF0aWMgX2dsb2JhbE9ic2VydmFibGU6IE9ic2VydmFibGU8YW55PiA9IG51bGw7XG4gIHN0YXRpYyBfZWxlbWVudE9ic2VydmFibGVSZWZlcmVuY2VzOiBNYXA8V2luZG93RWxlbWVudCwgT2JzZXJ2YWJsZTxhbnk+PiA9IG5ldyBNYXAoKTtcbiAgc3RhdGljIGlzV2luZG93KHdpbmRvd0VsZW1lbnQ6IFdpbmRvd0VsZW1lbnQpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHdpbmRvd0VsZW1lbnQpLmluY2x1ZGVzKCdXaW5kb3cnKTtcbiAgfVxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF93aW5kb3dSdWxlcjogV2luZG93UnVsZXIpIHtcbiAgICBpZiAoIVNjcm9sbE9ic2VydmFibGUuX2dsb2JhbE9ic2VydmFibGUpIHtcbiAgICAgIFNjcm9sbE9ic2VydmFibGUuX2dsb2JhbE9ic2VydmFibGUgPSB0aGlzLl9nZXRHbG9iYWxPYnNlcnZhYmxlKCk7XG4gICAgfVxuICB9XG4gIHByaXZhdGUgX2dldEdsb2JhbE9ic2VydmFibGUoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gT2JzZXJ2YWJsZS5tZXJnZShcbiAgICAgIE9ic2VydmFibGUuZnJvbUV2ZW50KHdpbmRvdy5kb2N1bWVudCwgJ3Njcm9sbCcpLFxuICAgICAgT2JzZXJ2YWJsZS5mcm9tRXZlbnQod2luZG93LCAncmVzaXplJylcbiAgICAgIC5tYXAoKGV2ZW50OiBhbnkpID0+IHtcbiAgICAgICAgdGhpcy5fd2luZG93UnVsZXIub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIH0pXG4gICAgKS5zaGFyZSgpO1xuICB9XG4gIHNjcm9sbE9ic2VydmFibGVGb3Iod2luZG93RWxlbWVudDogV2luZG93RWxlbWVudCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgaWYgKFNjcm9sbE9ic2VydmFibGUuaXNXaW5kb3cod2luZG93RWxlbWVudCkpIHtcbiAgICAgIHJldHVybiBTY3JvbGxPYnNlcnZhYmxlLl9nbG9iYWxPYnNlcnZhYmxlO1xuICAgIH1cbiAgICBpZiAoU2Nyb2xsT2JzZXJ2YWJsZS5fZWxlbWVudE9ic2VydmFibGVSZWZlcmVuY2VzLmhhcyh3aW5kb3dFbGVtZW50KSkge1xuICAgICAgcmV0dXJuIFNjcm9sbE9ic2VydmFibGUuX2VsZW1lbnRPYnNlcnZhYmxlUmVmZXJlbmNlcy5nZXQod2luZG93RWxlbWVudCk7XG4gICAgfVxuICAgIGNvbnN0IHJlZiA9IHRoaXMuX2NyZWF0ZUVsZW1lbnRPYnNlcnZhYmxlKHdpbmRvd0VsZW1lbnQpO1xuICAgIFNjcm9sbE9ic2VydmFibGUuX2VsZW1lbnRPYnNlcnZhYmxlUmVmZXJlbmNlcy5zZXQod2luZG93RWxlbWVudCwgcmVmKTtcbiAgICByZXR1cm4gcmVmO1xuICB9XG4gIHByaXZhdGUgX2NyZWF0ZUVsZW1lbnRPYnNlcnZhYmxlKHdpbmRvd0VsZW1lbnQ6IFdpbmRvd0VsZW1lbnQpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiBPYnNlcnZhYmxlLmZyb21FdmVudCh3aW5kb3dFbGVtZW50LCAnc2Nyb2xsJykuc2hhcmUoKTtcbiAgfVxuXG59XG4iXX0=