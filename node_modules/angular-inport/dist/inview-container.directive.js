"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Rx_1 = require("rxjs/Rx");
var inview_item_directive_1 = require("./inview-item.directive");
var scroll_observable_1 = require("./utils/scroll-observable");
var viewport_ruler_1 = require("./utils/viewport-ruler");
var offset_resolver_1 = require("./utils/offset-resolver");
var position_resolver_1 = require("./utils/position-resolver");
var InviewContainerDirective = (function () {
    function InviewContainerDirective(_element, _scrollObservable, _windowRuler, _zone) {
        this._element = _element;
        this._scrollObservable = _scrollObservable;
        this._windowRuler = _windowRuler;
        this._zone = _zone;
        this._throttleType = 'debounce';
        this._offset = [0, 0, 0, 0];
        this._viewPortOffset = [0, 0, 0, 0];
        this._throttle = 0;
        this._scrollWindow = true;
        this._lastScrollY = 0;
        this._scrollDirection = 'down';
        this.inview = new core_1.EventEmitter();
    }
    Object.defineProperty(InviewContainerDirective.prototype, "offset", {
        set: function (offset) {
            this._offset = offset_resolver_1.OffsetResolverFactory.create(offset).normalizeOffset();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InviewContainerDirective.prototype, "viewPortOffset", {
        set: function (offset) {
            this._viewPortOffset = offset_resolver_1.OffsetResolverFactory.create(offset).normalizeOffset();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InviewContainerDirective.prototype, "throttle", {
        set: function (throttle) {
            this._throttle = throttle;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InviewContainerDirective.prototype, "scrollWindow", {
        set: function (sw) {
            this._scrollWindow = !!sw;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InviewContainerDirective.prototype, "data", {
        set: function (_d) {
            this._data = _d;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InviewContainerDirective.prototype, "bestMatch", {
        set: function (bm) {
            this._bestMatch = !!bm;
        },
        enumerable: true,
        configurable: true
    });
    InviewContainerDirective.prototype.ngOnInit = function () { };
    InviewContainerDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        this._scrollSuscription = this._scrollObservable.scrollObservableFor(this._scrollWindow ? window : this._element.nativeElement)[this._throttleType](function () { return Rx_1.Observable.timer(_this._throttle); })
            .filter(function () { return true; })
            .mergeMap(function (event) { return Rx_1.Observable.of(_this._getViewPortRuler()); })
            .do(function () { return _this._checkScrollDirection(); })
            .subscribe(function (containersBounds) { return _this.handleOnScroll(containersBounds); });
    };
    InviewContainerDirective.prototype._checkScrollDirection = function () {
        if (this._scrollWindow) {
            this._scrollDirection = (window.scrollY > this._lastScrollY) ? 'down' : 'up';
            this._lastScrollY = window.scrollY;
        }
        else {
            this._scrollDirection = (this._element.nativeElement.scrollTop > this._lastScrollY) ? 'down' : 'up';
            this._lastScrollY = this._element.nativeElement.scrollTop;
        }
    };
    InviewContainerDirective.prototype._getViewPortRuler = function () {
        return this._scrollWindow ? this._windowRuler.getWindowViewPortRuler() : position_resolver_1.PositionResolver.getBoundingClientRect(this._element.nativeElement);
    };
    InviewContainerDirective.prototype.ngOnDestroy = function () {
        if (this._scrollSuscription) {
            this._scrollSuscription.unsubscribe();
        }
    };
    InviewContainerDirective.prototype.handleOnScroll = function (containersBounds) {
        var _this = this;
        var viewPortOffsetRect = position_resolver_1.PositionResolver.offsetRect(containersBounds, this._viewPortOffset);
        var visibleChildren = [];
        if (this._inviewChildren) {
            visibleChildren = this._inviewChildren.toArray().filter(function (child) {
                var elementOffsetRect = position_resolver_1.PositionResolver.offsetRect(child.getELementRect(), _this._offset);
                return child.isVisible() && position_resolver_1.PositionResolver.intersectRect(elementOffsetRect, viewPortOffsetRect);
            });
            if (this._bestMatch) {
                var bestMatchChild_1;
                if (visibleChildren.length) {
                    visibleChildren.reduce(function (distance, currChild) {
                        var _distance = position_resolver_1.PositionResolver.distance(viewPortOffsetRect, position_resolver_1.PositionResolver.offsetRect(currChild.getELementRect(), _this._offset));
                        if (distance > _distance) {
                            bestMatchChild_1 = currChild;
                            return _distance;
                        }
                        return distance;
                    }, Infinity);
                }
                var data_1 = bestMatchChild_1 ? bestMatchChild_1.getData() : {};
                data_1.direction = this._scrollDirection;
                this._zone.run(function () { return _this.inview.emit(data_1); });
            }
            else {
                var data_2 = {};
                data_2.inview = visibleChildren.map(function (vc) { return vc.getData(); });
                data_2.direction = this._scrollDirection;
                this._zone.run(function () { return _this.inview.emit(data_2); });
            }
        }
    };
    return InviewContainerDirective;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], InviewContainerDirective.prototype, "offset", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], InviewContainerDirective.prototype, "viewPortOffset", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], InviewContainerDirective.prototype, "throttle", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], InviewContainerDirective.prototype, "scrollWindow", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], InviewContainerDirective.prototype, "data", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], InviewContainerDirective.prototype, "bestMatch", null);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], InviewContainerDirective.prototype, "inview", void 0);
__decorate([
    core_1.ContentChildren(inview_item_directive_1.InviewItemDirective),
    __metadata("design:type", core_1.QueryList)
], InviewContainerDirective.prototype, "_inviewChildren", void 0);
InviewContainerDirective = __decorate([
    core_1.Directive({
        selector: '[in-view-container]'
    }),
    __metadata("design:paramtypes", [core_1.ElementRef,
        scroll_observable_1.ScrollObservable,
        viewport_ruler_1.WindowRuler,
        core_1.NgZone])
], InviewContainerDirective);
exports.InviewContainerDirective = InviewContainerDirective;
//# sourceMappingURL=data:application/json;base64,