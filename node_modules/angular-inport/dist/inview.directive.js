"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Rx_1 = require("rxjs/Rx");
var scroll_observable_1 = require("./utils/scroll-observable");
var offset_resolver_1 = require("./utils/offset-resolver");
var position_resolver_1 = require("./utils/position-resolver");
var viewport_ruler_1 = require("./utils/viewport-ruler");
;
var InviewDirective = (function () {
    function InviewDirective(_scrollObservable, _element, _zone, _windowRuler) {
        this._scrollObservable = _scrollObservable;
        this._element = _element;
        this._zone = _zone;
        this._windowRuler = _windowRuler;
        this._throttleType = 'debounce';
        this._offset = [0, 0, 0, 0];
        this._viewPortOffset = [0, 0, 0, 0];
        this._throttle = 0;
        this._lazy = false;
        this._tooLazy = false;
        this.inview = new core_1.EventEmitter();
    }
    Object.defineProperty(InviewDirective.prototype, "offset", {
        set: function (offset) {
            this._offset = offset_resolver_1.OffsetResolverFactory.create(offset).normalizeOffset();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InviewDirective.prototype, "viewPortOffset", {
        set: function (offset) {
            this._viewPortOffset = offset_resolver_1.OffsetResolverFactory.create(offset).normalizeOffset();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InviewDirective.prototype, "throttle", {
        set: function (throttle) {
            this._throttle = throttle;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InviewDirective.prototype, "scrollELement", {
        set: function (sw) {
            this._scrollElement = sw;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InviewDirective.prototype, "lazy", {
        set: function (lzy) {
            this._lazy = lzy;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InviewDirective.prototype, "tooLazy", {
        set: function (lzy) {
            this._tooLazy = lzy;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InviewDirective.prototype, "data", {
        set: function (_d) {
            this._data = _d;
        },
        enumerable: true,
        configurable: true
    });
    InviewDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        this._scrollerSubscription = this._scrollObservable.scrollObservableFor(this._scrollElement || window)[this._throttleType](function () { return Rx_1.Observable.timer(_this._throttle); })
            .filter(function () { return true; })
            .mergeMap(function (event) { return Rx_1.Observable.of(_this._getViewPortRuler()); })
            .subscribe(function (containersBounds) { return _this.handleOnScroll(containersBounds); });
    };
    InviewDirective.prototype._getViewPortRuler = function () {
        return this._scrollElement ? position_resolver_1.PositionResolver.getBoundingClientRect(this._scrollElement) : this._windowRuler.getWindowViewPortRuler();
    };
    InviewDirective.prototype.ngOnInit = function () { };
    InviewDirective.prototype.ngOnDestroy = function () {
        if (this._scrollerSubscription) {
            this._scrollerSubscription.unsubscribe();
        }
    };
    InviewDirective.prototype.handleOnScroll = function (containersBounds) {
        var _this = this;
        var viewPortOffsetRect = position_resolver_1.PositionResolver.offsetRect(containersBounds, this._viewPortOffset);
        var elementOffsetRect = position_resolver_1.PositionResolver.offsetRect(position_resolver_1.PositionResolver.getBoundingClientRect(this._element.nativeElement), this._offset);
        var isVisible = position_resolver_1.PositionResolver.isVisible(this._element.nativeElement) && position_resolver_1.PositionResolver.intersectRect(elementOffsetRect, viewPortOffsetRect);
        if (this._tooLazy && this._previous_state !== undefined && (this._previous_state === isVisible)) {
            return;
        }
        var output = { status: isVisible };
        if (this._data !== undefined) {
            output.data = this._data;
        }
        if (!this._lazy && !isVisible) {
            output.isClipped = false;
            output.isOutsideView = true;
            output.parts = { top: false, right: false, left: false, bottom: false };
            this._zone.run(function () { return _this.inview.emit(output); });
        }
        if (!isVisible) {
            this._previous_state = isVisible;
            return;
        }
        var _a = position_resolver_1.PositionResolver.clippedStatus(elementOffsetRect, viewPortOffsetRect), isClipped = _a.isClipped, isOutsideView = _a.isOutsideView;
        output.isClipped = isClipped;
        output.isOutsideView = isOutsideView;
        output.parts = position_resolver_1.PositionResolver.inViewParts(viewPortOffsetRect, elementOffsetRect);
        this._zone.run(function () { return _this.inview.emit(output); });
        this._previous_state = isVisible;
    };
    return InviewDirective;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], InviewDirective.prototype, "offset", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], InviewDirective.prototype, "viewPortOffset", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], InviewDirective.prototype, "throttle", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", HTMLElement),
    __metadata("design:paramtypes", [HTMLElement])
], InviewDirective.prototype, "scrollELement", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], InviewDirective.prototype, "lazy", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], InviewDirective.prototype, "tooLazy", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], InviewDirective.prototype, "data", null);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], InviewDirective.prototype, "inview", void 0);
InviewDirective = __decorate([
    core_1.Directive({
        selector: '[in-view]'
    }),
    __metadata("design:paramtypes", [scroll_observable_1.ScrollObservable,
        core_1.ElementRef,
        core_1.NgZone,
        viewport_ruler_1.WindowRuler])
], InviewDirective);
exports.InviewDirective = InviewDirective;
//# sourceMappingURL=data:application/json;base64,